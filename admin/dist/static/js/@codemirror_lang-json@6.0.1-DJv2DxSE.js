import{p as o}from"./@lezer_json@1.0.3--D6AnuiR.js";import{L as a,c as s,d as i,f as p,e as n,k as m}from"./@codemirror_language@6.11.1-BYrSuhr8.js";import"./@lezer_lr@1.4.2-Ci39YVr6.js";import"./@lezer_common@1.2.3-CP7NCNqd.js";import"./@lezer_highlight@1.2.1-DwVMghhY.js";import"./@codemirror_state@6.5.2-DQ6R6BiX.js";import"./@marijn_find-cluster-break@1.0.2-DXwl3gUT.js";import"./@codemirror_view@6.37.1-Bd3_Yh4F.js";import"./style-mod@4.1.2-Bc2inJdb.js";import"./w3c-keyname@2.2.8-Vcq4gwWv.js";const P=()=>r=>{try{JSON.parse(r.state.doc.toString())}catch(t){if(!(t instanceof SyntaxError))throw t;const e=c(t,r.state.doc);return[{from:e,message:t.message,severity:"error",to:e}]}return[]};function c(r,t){let e;return(e=r.message.match(/at position (\d+)/))?Math.min(+e[1],t.length):(e=r.message.match(/at line (\d+) column (\d+)/))?Math.min(t.line(+e[1]).from+ +e[2]-1,t.length):0}const d=a.define({name:"json",parser:o.configure({props:[i.add({Object:n({except:/^\s*\}/}),Array:n({except:/^\s*\]/})}),p.add({"Object Array":m})]}),languageData:{closeBrackets:{brackets:["[","{",'"']},indentOnInput:/^\s*[\}\]]$/}});function S(){return new s(d)}export{S as json,d as jsonLanguage,P as jsonParseLinter};
