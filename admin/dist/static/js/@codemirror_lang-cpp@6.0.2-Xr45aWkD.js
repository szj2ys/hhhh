import{p as n}from"./@lezer_cpp@1.1.3-EZWvm7zA.js";import{L as o,c as a,d as r,f as i,e as t,h as p,j as m,k as s}from"./@codemirror_language@6.11.1-BYrSuhr8.js";import"./@lezer_lr@1.4.2-Ci39YVr6.js";import"./@lezer_common@1.2.3-CP7NCNqd.js";import"./@lezer_highlight@1.2.1-DwVMghhY.js";import"./@codemirror_state@6.5.2-DQ6R6BiX.js";import"./@marijn_find-cluster-break@1.0.2-DXwl3gUT.js";import"./@codemirror_view@6.37.1-Bd3_Yh4F.js";import"./style-mod@4.1.2-Bc2inJdb.js";import"./w3c-keyname@2.2.8-Vcq4gwWv.js";const d=o.define({name:"cpp",parser:n.configure({props:[r.add({IfStatement:t({except:/^\s*({|else\b)/}),TryStatement:t({except:/^\s*({|catch)\b/}),LabeledStatement:m,CaseStatement:e=>e.baseIndent+e.unit,BlockComment:()=>null,CompoundStatement:p({closing:"}"}),Statement:t({except:/^{/})}),i.add({"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList":s,BlockComment(e){return{from:e.from+2,to:e.to-2}}})]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case |default:|\{|\})$/,closeBrackets:{stringPrefixes:["L","u","U","u8","LR","UR","uR","u8R","R"]}}});function b(){return new a(d)}export{b as cpp,d as cppLanguage};
