import{p as o}from"./@lezer_rust@1.0.2-BQACH-QM.js";import{L as r,c as s,d as i,f as a,e as n,k as m}from"./@codemirror_language@6.11.1-BYrSuhr8.js";import"./@lezer_lr@1.4.2-Ci39YVr6.js";import"./@lezer_common@1.2.3-CP7NCNqd.js";import"./@lezer_highlight@1.2.1-DwVMghhY.js";import"./@codemirror_state@6.5.2-DQ6R6BiX.js";import"./@marijn_find-cluster-break@1.0.2-DXwl3gUT.js";import"./@codemirror_view@6.37.1-Bd3_Yh4F.js";import"./style-mod@4.1.2-Bc2inJdb.js";import"./w3c-keyname@2.2.8-Vcq4gwWv.js";const p=r.define({name:"rust",parser:o.configure({props:[i.add({IfExpression:n({except:/^\s*({|else\b)/}),"String BlockComment":()=>null,AttributeItem:e=>e.continue(),"Statement MatchArm":n()}),a.add(e=>{if(/(Block|edTokens|List)$/.test(e.name))return m;if(e.name=="BlockComment")return t=>({from:t.from+2,to:t.to-2})})]}),languageData:{commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:\{|\})$/,closeBrackets:{stringPrefixes:["b","r","br"]}}});function x(){return new s(p)}export{x as rust,p as rustLanguage};
